<?php
    $title = 'Assessment Report Index';
    $this->headTitle($title);
?>
<div class="container">
    <center><h3>Assessment Reports</h3></center>
    
    <p></p>  
    <div class="row">
        <div class="col-md-4 noprint">
        <div class="container">
             
        <p></p>
        <!-- Choose Action -->
        <select class="selectpicker" id="action-menu" data-style="btn-primary" title='Choose Action'>
         <option data-hidden="true"></option>
        </select>  
        <br />
        <br />
       
        <!-- Choose Department/Unit -->
        <select class="selectpicker" id="unit-menu" data-style="btn-primary" title='Choose Department/Unit'>
           <option data-hidden="true"></option>
        </select>  
        <br />
        <br />
     
        <!-- Choose Program/Degree -->
        <select class="selectpicker" id="prog-menu" name="prog-menu" data-style="btn-primary" title='Choose Program/Degree' multiple data-selected-text-format="values">
	 <option data-hidden="true"></option>
        </select>
        <br />
        <br />
      
        <!-- Choose Year -->
        <select class="selectpicker" id="year-menu" name="year-menu" data-style="btn-primary" title='Choose Year'>
             <option data-hidden="true"></option>
        </select>
        <br />
        <br />
   
	  <!-- Get Button trigger modal -->
        <a class="btn btn-primary btn-md" id="submit" name="submit" disabled>
            Submit&nbsp&nbsp&raquo
        </a>
        <p></p>
        </div><!--close container-->
        </div><!--close column-->
		
	<!--column 2-->
	<div id="content">
	</div>
    </div>
</div>
    
<script>
function getReports(action, id) {
    
    if (action == "Provide Feedback")
    {
        // create the url to redirect to the provide feedback plan page
        var urlform = "<?php echo $this->url('default', array('controller'=>'reports','action'=>'provideFeedback')); ?>";
    }
    else
    {
        var urlform = "<?php echo $this->url('default', array('controller'=>'reports')); ?>";
        urlform = urlform + action + 'Report';
    }
    // asynchronous ajax code to get Report
    $.ajax({
      url: urlform,
      type: "POST",
      data: 'id=' + id,
      dataType: "text",
      error : function(xhr, status, error) {
        alert(error);
      },
      success: function(html){
        document.getElementById('content').innerHTML = html;
      },
   });
   
}



// load actions based on user privileges
$(document).ready(function() {
    var actions = <?php print json_encode($useractions); ?>;
    for (var i = 0; i < actions.length; i++){
       $('#action-menu').append('<option>' + actions[i] + '</option>');
    }
    $("#submit").attr('disabled','disabled');

    // call code to initialize the selectpicker
    // this must come after the options are initialized
    $('.selectpicker').selectpicker();
   
   
});

// update unit/department options based on actions
$(document).on('change', '#action-menu', function () {
    
     
    $action = $('#action-menu option:selected').val();
    
    clearUnits();
    
    clearPrograms();
    
    clearYears();
    
    // create url for redirect
    var urlform = "<?php echo $this->url('default', array(
                                    'controller'=>'reports',
                                    'action'=>'getUnits')); ?>";

    urlform = urlform + '/' + $action;
    // asynchronous ajax code to populate unit/department selector
    $.ajax({
      url: urlform,
      type: "GET",
      dataType: "json",
      error : function(xhr, status, error) {
         console.log("ERROR: ", xhr, xhr.status, xhr.getAllResponseHeaders());
      },
      success: function(unitsJson){
         for (var i = 0; i < unitsJson.length; i++){
            $('#unit-menu').append('<option>' + unitsJson[i].id + '</option>');
         }
         $('#unit-menu').selectpicker('refresh');
      },
   });
});

// update program options based on unit/department
$(document).on('change', '#unit-menu', function () {
    
    $unit = $('#unit-menu option:selected').val();
    
    clearPrograms();
    
    clearYears();
    
    // create url for redirect
    var urlform = "<?php echo $this->url('default', array(
                                    'controller'=>'reports',
                                    'action'=>'getPrograms')); ?>";
    urlform = urlform + '/' + $unit;
    // asynchronous ajax code to populate program/degree selector
    // build stuff here and make it work
     var stuff = {};
     //key programs, value = array of programs
     $.ajax({
       url: urlform,
       type: "GET", //post
       dataType: "json",//data 
       data:stuff,
       // content type
      
       error : function(xhr, status, error) {
	  alert(error);
          console.log("ERROR: ", xhr, xhr.status, xhr.getAllResponseHeaders());
       },
       success: function(programsJson){
         $('#prog-menu').append('<option disabled="disabled" class="panel">CHECK ALL THAT APPLY</option>');
         for (var i = 0; i < programsJson.length; i++){
	    $('#prog-menu').append('<option value="' + programsJson[i].id + '">' + programsJson[i].name + '</option>');
         }
         $('#prog-menu').selectpicker('refresh');
       },
    });
});

// function executes when user chooses program from dropdown
$(document).on('change', '#prog-menu', function () {
    
    // startyear for dropdowns set in session namespace variables
    var startYear = <?php echo $startYear ?>;
	    
    // create the list of years the user can select
    // identify today's date and adjust to the current school year
    // 2013 - 2014 is from July 2013 - June 2014
    // 2012 - 2013 is from July 2012 - June 2013
    // repeat until startyear
	
    // start with empty set
    clearYears();
        
    // get today's date
    var today = new Date();
    
    // identify the month and year
    var month= today.getMonth() + 1; //January is 0
    var year = today.getFullYear(); // yyyy
   
    // if the current month is Jan - June the current year is correct
    // if the current month is July - Dec then current year needs to be incremented by 1
    if (month >= 7 && month <= 12) {
	year++;
    }
	    
    // set the complete number of years to display in the year selector 
    var yearsToDisplay = year - startYear + 1; // add one since the last entry needs to be the (year before the low year) to the (low year)

    $('#year-menu').append('<option  data-hidden="true"></option>');
    for (var i = 0; i < yearsToDisplay; i++){	    
        $('#year-menu').append('<option value = ' + year + '>' + (year-1) + ' - ' + year + '</option>');
        year--;
    }
    $('#year-menu').selectpicker('refresh');
});

// function executes when user chooses year from dropdown
$(document).on('change', '#year-menu', function () {
    $("#submit").removeAttr('disabled');;
  
});

// button actions on add/modify/provide feedback screens
$(document).on('click', '#submitButton', function () {
    document.getElementById('status').value = 0;  // submit report or feedback
    document.getElementById('data').submit();  // calls action set in .phtml view
});

$(document).on('click', '#draftButton', function () { 
    var conf = confirm("Caution! You are saving a draft not submitting a final report.");
                    
    document.getElementById('status').value = 1;  //save draft
    document.getElementById('data').submit();  // calls action set in .phtml view
});

$(document).on('click', '#deleteDraft', function () {
      //confirm deletion
    var conf = confirm("Are you sure you want to delete this draft?");

    // if confirmed?
    if(conf == true){
        document.getElementById('status').value = 2;  // physically delete draft 
        document.getElementById('data').submit();  // calls action set in .phtml view
    }
});

$(document).on('click', '#deleteButton', function () {
      //confirm deletion
    var conf = confirm("Are you sure you want to delete this report?");

    // if confirmed?
    if(conf == true){
        document.getElementById('status').value = 3;  // inactivate active report
        document.getElementById('data').submit();   // calls action set in .phtml view
    }
});


// Submit data to get plans
$(document).on('click', '#submit', function () {
    var action = document.getElementById('action-menu').value;
    var unit = document.getElementById('unit-menu').value;
    // must grab programs using name otherwise only grabs one value
    var programs = $('[name=prog-menu]').val();
    // build comma delimited list of selected names to display in title on page
    var programNames = '';
    var ctr = 1;
    $( "#prog-menu option:selected" ).each(function( index ) {
        if (ctr > 1){
            programNames = programNames + ', ';
        }
        programNames = programNames + $( this ).text();
        ctr++;
    });
    var year = document.getElementById('year-menu').value;
    
    var json = '{"action" : "' + action + '", "unit" : "' + unit + '", "programNames" : "' + programNames + '", "year" : "' + year + '", "programs" : ' + JSON.stringify(programs) + ' }';
    // asynchronous ajax code to get plans
     
    
    // create the url to redirect to the view plan page
    var urlform = "<?php echo $this->url('default', array(
                            'controller'=>'reports',
                            'action'=>'viewPlans')); ?>";
    
   
    $.ajax({
       url: urlform,
 
       type: "POST",
       data: json,
       dataType: "text",
       error : function(xhr, status, error) {
            alert(error);
            console.log("ERROR: ", xhr, xhr.status, xhr.getAllResponseHeaders());
       },
       success: function(html){
            document.getElementById('content').innerHTML = html;
       },
    });
});
/**
 * File upload button #0 - check to make sure the file size is not too large
 */
$(document).on('change', '#fileUpload0', function () {
    
    // get the file size    
    var fileSize = ($("#fileUpload0")[0].files[0].size);
    
    // check the file size against the max file size allowed   
    if (!validateFileSize(fileSize)) {
    	// remove the file from the upload element
	$("#fileUpload0").val('');
	$("#textFileDescription0").val('');
    }
});


/**
 * File upload button #1 - check to make sure the file size is not too large
 */
$(document).on('change', '#fileUpload1', function () {
    
    // get the file size    
    var fileSize = ($("#fileUpload1")[0].files[0].size);
    
    // check the file size against the max file size allowed   
    if (!validateFileSize(fileSize)) {
    	// remove the file from the upload element
	$("#fileUpload1").val('');
	$("#textFileDescription1").val('');
    }
});


/**
 * Remove File hyperlink - removes the selected file and blanks out the file description textbox
 */
$(document).on('click', '#removeFile0', function () {
   $("#fileUpload0").val('');
   $("#textFileDescription0").val('');
});


/**
 * Remove File hyperlink - removes the selected file and blanks out the file description textbox
 */
$(document).on('click', '#removeFile1', function () {
   $("#fileUpload1").val('');
   $("#textFileDescription1").val('');
});

function clearUnits()
{
     // clear selectorlist before adding unit/department options
    var oldSelections = $('#unit-menu option');
    for (var i = 0; i < oldSelections.length; i++){
       oldSelections.remove();
    }
    // data-hidden="true" shows title on button
    $('#unit-menu').append('<option  data-hidden="true"></option>');
    $('#unit-menu').selectpicker('refresh');
}

function clearPrograms()
{
    // clear selectorlist for programs
    var oldSelections = $('#prog-menu option');
    for (var i = 0; i < oldSelections.length; i++){
       oldSelections.remove();
    }
    $('#prog-menu').append('<option  data-hidden="true"></option>');
    $('#prog-menu').selectpicker('refresh');
   
}

function clearYears()
{
    // clear selectorlist for years
    var oldSelections = $('#year-menu option');
    for (var i = 0; i < oldSelections.length; i++){
       oldSelections.remove();
    }
    // data-hidden="true" shows title on button
    $('#year-menu').append('<option  data-hidden="true"></option>');
    $('#year-menu').selectpicker('refresh');
    $("#submit").attr('disabled','disabled');
}
/**
 * Validate the passed file size against the max file size allowed
 *
 * return true if the file size is less than the max
 * return false if the file size is greater than the max
 */
function validateFileSize(fileSize)
{
    var mb = 1000000;
    var maxFileSize = 2000000;
    
    // check the file size
    if (fileSize > maxFileSize) {
        //display the large file in MB rounds to 1 decimal place
	var mbSize = (fileSize/mb).toFixed(1);
	alert("Your file size is " + mbSize + "MB and is too large to upload.  The max file size is " + (maxFileSize/mb) + " MB.");

	return false;
    }
    
    return true;
}



/**
 * Only print specific elements on the view page.  To mark elements as non printable
 * add class noprint
 */

function printPage()
{
    $('.panel-collapse').collapse('show');
    $('.noprint').hide();
    window.print();
    $('.panel-collapse').collapse('hide');
    $('.noprint').show();
    
}   
</script>
                     
                            
                            
                            
                            
 










